import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {
    private static final boolean needFileIO = true;
    private static final String INPUT_FILE = "in";

    static class Solver {
	private StringBuilder sb = new StringBuilder();
	List<List<Integer>> adj = null;
	int[] indeg = null; // {in degree of a node}
	List<Integer> top_order;
	int n, m;
	
	public void solve(InputReader in, PrintWriter out) {
	    n = in.ni();
	    m = in.ni();
	    adj = new ArrayList<>();
	    for (int i = 0; i < n; ++i) {
		adj.add(new ArrayList<>());
	    }
	    indeg = new int[n];
	    for (int i = 0; i < m; ++i) {
		int u = in.ni() - 1, v = in.ni() - 1;
		adj.get(u).add(v);
		++indeg[v];
	    }
	    getTopSort();
	    for (int el : top_order) jpo((el + 1) + " ");
	    out.println(sb.toString());
	}

	void getTopSort() {
	    top_order = new ArrayList<>();
	    Queue<Integer> q = new LinkedList<>();
	    for (int i = 0; i < n; ++i) {
		if (indeg[i] == 0) {
		    q.offer(i);
		}
	    }
	    int vertex_count = 0;
	    while (!q.isEmpty()) {
		int u = q.poll();
		top_order.add(u);
		++vertex_count;
		for (int v : adj.get(u)) {
		    --indeg[v];
		    if (indeg[v] == 0) {
			q.offer(v);
		    }
		}
	    }
	    if (vertex_count != 5) {
		System.err.println("Cycle");
	    }
	    
	}

	// Short for Process Output
	private void po(Object o) { sb.append("" + o).append("\n"); }
	private void po(Object... o) { sb.append("" + Arrays.deepToString(o)).append("\n"); }
	private void jpo(Object o) { sb.append("" + o); }
    }

    static class InputReader {
	private final BufferedReader br;
	private StringTokenizer t;
	public InputReader(InputStream is) {
	    br = new BufferedReader(new InputStreamReader(is));
	    t = null;
	}
	public int ni() { return Integer.parseInt(ns()); }
	public long nl() { return Long.parseLong(ns()); }
	public double nd() { return Double.parseDouble(ns()); }
	public BigInteger nbi() { return new BigInteger(ns()); }
	public BigDecimal nbd() { return new BigDecimal(ns()); }
	public String ns() {
	    while (t == null || !t.hasMoreTokens()) {
		try { t = new StringTokenizer(br.readLine());
		} catch (IOException e) { throw new RuntimeException(e); }
	    }
	    return t.nextToken();
	}
	public String nli() {
	    String line = "";
	    try {
		line = br.readLine();
	    } catch (IOException e) { throw new RuntimeException(e); }
	    return line;
	}
    }
      
    public static void main(String[] args) {
	InputStream is = System.in;
	if (needFileIO) {
	    try {
		is = new FileInputStream(INPUT_FILE);
		//os = new FileOutputStream("out");
	    } catch (FileNotFoundException e) { throw new RuntimeException(e); }
	}
	InputReader in = new InputReader(is);
	OutputStream os = System.out; PrintWriter out = new PrintWriter(os);
	new Solver().solve(in, out);
	out.close();
    }
}
